getwd()
list.files()
logDir <- "~"
logName <- "timing_test.csv"
if (file.exists(file.path(logDir, logName))) {
test_dt <- rbind(test_dt, fread(file.path(logDir, logName)))
}
test_dt
fwrite(test_dt, file.path(logDir, logName))
if (file.exists(file.path(logDir, logName))) {
test_dt <- rbind(test_dt, fread(file.path(logDir, logName)))
}
test_dt
test_dt %>% unique
test_dt_master
test_dt <- test_dt_master
fwrite(test_dt, file.path(logDir, logName))
test_dt
test_dt_master
test_dt_master[order(w, eval20)]
source('~/my_code/impossible_wordsearch/99_main_code.R', echo=TRUE)
source('~/my_code/impossible_wordsearch/99_main_code.R', echo=TRUE)
w <- 5
h <- 5
word <- "god"
renderUnsolved(ws, word)
w
ws <- buildHardWs(w = w, h = h, word = word)
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
renderUnsolved(ws, word)
getwd()
setwd("~"); getwd()
setwd("~/my_code/impossible_wordsearch")
list.files()
sapply(list.files(".", full.names = TRUE), FUN = function(x) {
if (grepl(".R$", toupper(x))) {source(x)} })
rm(list = ls()); gc()
setwd("~/my_code/impossible_wordsearch")
sapply(list.files(".", full.names = TRUE), FUN = function(x) {
if (grepl(".R$", toupper(x))) {source(x)} })
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
ws <- buildHardWs(w = w, h = h, word = word)
w <- 5
h <- 5
word <- "god"
ws <- buildHardWs(w = w, h = h, word = word)
ws
coordDt <- findWord(ws = ws, word = word)
coordDt
as.integer(1.49)
as.integer(1.59)
round(1.59)
round(1.59, 0)
1 == round(1.4)
click_x <- 2.97
click_y <- 3.4
coordDt <- findWord(ws = ws, word = word)
coordDtClicked <- coordDT[x == round(click_x)][y == click_y]
coordDtClicked <- coordDt[x == round(click_x)][y == click_y]
ccoordDtClicked
coordDtClicked
click_x
round(Click_x)
round(click_x)
coordDt
round(click_y)
coordDtClicked <- coordDt[x == round(click_x)][y == round(click_y)]
coordDtClicked
coordDtClicked[, .N]
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
runApp('shiny')
runApp('shiny')
runApp('shiny')
w <- 5
h <- 5
word <- "god"
ws <- buildHardWs(w = w, h = h, word = word)
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
renderSolved(ws, word, "bad")
rm(list = ls()); gc()
setwd("~/my_code/impossible_wordsearch")
sapply(list.files(".", full.names = TRUE), FUN = function(x) {
if (grepl(".R$", toupper(x))) {source(x)} })
library(shiny)
ui <- basicPage(
sidebarLayout(
sidebarPanel(
numericInput("w", label = "Width: ", min = 1, max = 100, value = 10),
numericInput("h", label = "Height: ", min = 1, max = 100, value = 10),
textInput("word", label = "Word: ", value = "word"),
actionButton(inputId = "press_build", "Build!")
),
mainPanel(
plotOutput("ws_output", click = "plot_click")
)
)
)
server <- function(input, output) {
# Reactive table
values <- reactiveValues()
values$selected_table <- data.table(x = numeric(),
release = character())
output$ws_output <- renderPlot(ggplot())
observeEvent(input$press_build, {
ws <- buildHardWs(w = input$w, h = input$h, word = input$word)
output$ws_output <- renderPlot({
renderUnsolved(ws = buildHardWs(w = input$w, h = input$h,
word = input$word), word = input$word)
})
})
# output$ws_output <- renderPlot({
#   renderUnsolved(ws = buildHardWs(w = input$w, h = input$h,
#                                   word = input$word), word = input$word)
#  })
observeEvent(input$plot_click, {
x <- round(input$plot_click$x, 0)
y <- round(input$plot_click$y, 0)
print(c(x, y))
output$ws_output <- renderPlot({
renderClicked(ws = ws, word = input$word, click_x = x, click_y = y)
})
# values$selected_table <- rbind(values$selected_table,
#                                data.table(x = input$plot_click$x,
#                                           release = clickedRelease)) %>%
#   .[, N := .N, by = release] %>%
#   .[N < 2] %>% .[, N := NULL]
})
}
shinyApp(ui, server)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
w <- 5
h <- 5
word <- "god"
ws <- buildHardWs(w = w, h = h, word = word)
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
renderSolved(ws, word, "bad")
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
renderSolved(ws, word, "good")
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
w <- 5
h <- 5
word <- "god"
ws <- buildHardWs(w = w, h = h, word = word)
renderUnsolved(ws, word)
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
renderUnsolved(ws, word)
renderSolved(ws, word, "good")
runApp('shiny')
source('~/my_code/impossible_wordsearch/02_plot_functions.R', echo=TRUE)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
print("ok"); Sys.sleep(5); print("dokie")
print("ok"); Sys.sleep(1); print("dokie")
runApp('shiny')
runApp('shiny')
runApp('shiny')
rm(list = ls()); gc()
setwd("~/my_code/impossible_wordsearch")
sapply(list.files(".", full.names = TRUE), FUN = function(x) {
if (grepl(".R$", toupper(x))) {source(x)} })
library(shiny)
# TODO list
# - Make the plot letters bigger/nicer/general plot clean-up
# - Design the shiny app's "next game" logic
# - Make the shiny app have "next game" logic
# - Radio button toggle to set up adaptive mode
# - build logic + functions of adaptive mode
ui <- basicPage(
sidebarLayout(
sidebarPanel(
numericInput("w", label = "Width: ", min = 1, max = 100, value = 10),
numericInput("h", label = "Height: ", min = 1, max = 100, value = 10),
textInput("word", label = "Word: ", value = "word"),
actionButton(inputId = "press_build", "Build!")
),
mainPanel(
plotOutput("ws_output", click = "plot_click")
)
)
)
server <- function(input, output) {
output$ws_output <- renderPlot(ggplot())
inputData <- eventReactive(input$press_build, {
ws <- buildHardWs(w = input$w, h = input$h, word = input$word)
list(ws = ws, word = input$word)
})
output$ws_output <- renderPlot({
renderUnsolved(ws = inputData()$ws, word = inputData()$word)
})
observeEvent(input$plot_click, {
lat <- round(input$plot_click$x, 0)
long <- round(input$plot_click$y, 0)
print(c(lat, long))
output$ws_output <- renderPlot({
renderClicked(ws = inputData()$ws,
word = inputData()$word,
click_x = long, click_y = lat)
})
output$ws_output <- renderPlot({
renderUnsolved(ws = inputData()$ws, word = inputData()$word)
})
# values$selected_table <- rbind(values$selected_table,
#                                data.table(x = input$plot_click$x,
#                                           release = clickedRelease)) %>%
#   .[, N := .N, by = release] %>%
#   .[N < 2] %>% .[, N := NULL]
})
}
shinyApp(ui, server)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?observeEvent
runApp('shiny')
runApp('shiny')
runApp('shiny')
source('~/.active-rstudio-document', echo=TRUE)
if (interactive()) {
ui <- fluidPage(
tags$h1("radioGroupButtons examples"),
radioGroupButtons(
inputId = "somevalue1",
label = "Make a choice: ",
choices = c("A", "B", "C")
),
verbatimTextOutput("value1"),
radioGroupButtons(
inputId = "somevalue2",
label = "With custom status:",
choices = names(iris),
status = "primary"
),
verbatimTextOutput("value2"),
radioGroupButtons(
inputId = "somevalue3",
label = "With icons:",
choices = names(mtcars),
checkIcon = list(
yes = icon("check-square"),
no = icon("square-o")
)
),
verbatimTextOutput("value3")
)
server <- function(input, output) {
output$value1 <- renderPrint({ input$somevalue1 })
output$value2 <- renderPrint({ input$somevalue2 })
output$value3 <- renderPrint({ input$somevalue3 })
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
tags$h1("radioGroupButtons examples"),
radioGroupButtons(
inputId = "somevalue1",
label = "Make a choice: ",
choices = c("A", "B", "C")
),
verbatimTextOutput("value1"),
radioGroupButtons(
inputId = "somevalue2",
label = "With custom status:",
choices = names(iris),
status = "primary"
),
verbatimTextOutput("value2"),
radioGroupButtons(
inputId = "somevalue3",
label = "With icons:",
choices = names(mtcars),
checkIcon = list(
yes = icon("check-square"),
no = icon("square-o")
)
),
verbatimTextOutput("value3")
)
server <- function(input, output) {
output$value1 <- renderPrint({ input$somevalue1 })
output$value2 <- renderPrint({ input$somevalue2 })
output$value3 <- renderPrint({ input$somevalue3 })
}
shinyApp(ui, server)
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?plotOutput
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
gc()
gc()
runApp('shiny')
?pnorm
pnorm(2.8, 1.96, .8)
pnorm(2.8, 1.96, 2)
pnorm(2.8, 1.96,  5)
pnorm(2.8, 1.96, 1)
pnorm(q = 2.8, 1.96, 1)
pnorm(q = 2.8, 1.96, 1)
pnorm(p = 2.8, 1.96, 1)
pnorm(q = 2.8, 1.96, 1)
qnorm(p = 2.8, 1.96, 1)
qnorm(p = .8, 1.96, 1)
pnorm(q = 2.8, 1.96, 1)
runApp('shiny')
stop()
start()
?start
start(0)
starTime <- system.time()
?Sys.time()
Sys.time()
time1 <- Sys.time()
time2 <- Sys.time()
time2 - time1
time2 - time1 %>% sqrt
time2 - time1 %>% as.numeric()
while(Sys.time() - time1 < 30 ) {print(time1)}
while(Sys.time() - time1 < 30 ) {print(time1)}
runApp('shiny')
time1 <- Sys.time() %>% as.numeric
time1
# output$ws_output <- renderPlot(ggplot())
startTime <- Sys.time()
runApp('shiny')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot")
)
server <- function(input, output) {
# Anything that calls autoInvalidate will automatically invalidate
# every 2 seconds.
autoInvalidate <- reactiveTimer(2000)
observe({
# Invalidate and re-execute this reactive expression every time the
# timer fires.
autoInvalidate()
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
print(paste("The value of input$n is", isolate(input$n)))
})
# Generate a new histogram each time the timer fires, but not when
# input$n changes.
output$plot <- renderPlot({
autoInvalidate()
hist(rnorm(isolate(input$n)))
})
}
shinyApp(ui, server)
}
runApp('shiny')
runApp('shiny')
source('~/.active-rstudio-document', echo=TRUE)
runApp('shiny')
runApp('shiny')
?observeEvent
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot")
)
server <- function(input, output) {
# Anything that calls autoInvalidate will automatically invalidate
# every 2 seconds.
autoInvalidate <- reactiveTimer(2000)
observe({
# Invalidate and re-execute this reactive expression every time the
# timer fires.
autoInvalidate()
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
print(paste("The value of input$n is", isolate(input$n)))
})
# Generate a new histogram each time the timer fires, but not when
# input$n changes.
output$plot <- renderPlot({
autoInvalidate()
hist(rnorm(isolate(input$n)))
})
}
shinyApp(ui, server)
runApp('shiny')
runApp('shiny')
ggtitle(paste0(runif(n = 2)))
ggtitle(paste0(runif(n = 2)))
runif(n = 2)
ggtitle(paste0(runif(n = 2) %>% round(0)))
runApp('shiny')
runApp('shiny')
paste0(runif(n = 2) %>% round(0))
paste0(runif(n = 2) %>% round(0))
paste0(runif(n = 2) * 20 %>% round(0))
paste0(runif(n = 2) * 20) %>% round(0))
paste0(runif(n = 2) * 20) %>% round(0)
paste0((runif(n = 2) * 20) %>% round(0))
paste0((runif(n = 2) * 20) %>% round(0), collapse = "")
paste0((runif(n = 2) * 20) %>% round(0), collapse = "")
paste0((runif(n = 2) * 20) %>% round(0), collapse = "")
paste0((runif(n = 2) * 20) %>% round(0), collapse = "")
runApp('shiny')
runApp('shiny')
?invalidateLater
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?reactivePoll
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?invalidateLater
?reactiveTimer
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?reactive
runApp('shiny')
runApp('shiny')
reactiveVal(0)
?reactiveVal
source('~/.active-rstudio-document', echo=TRUE)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
?freqpoly
??freqpoly
source('~/.active-rstudio-document', echo=TRUE)
?rpois
source('~/.active-rstudio-document', echo=TRUE)
runApp('shiny')
runApp('shiny')
